"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var firebase = require("nativescript-plugin-firebase");
var _1 = require("./");
var _2 = require("./");
var DataAccess = (function () {
    function DataAccess(DL) {
        this.DL = DL;
        this.ImageUploaded = new core_1.EventEmitter();
        this.RecipeDAL = new _2.RecipeDAL(this.DL);
    }
    DataAccess.prototype.Load = function () {
        this.RecipeDAL.Load();
        this.userChanged();
    };
    DataAccess.prototype.Login = function () {
        var _this = this;
        firebase.login({
            type: firebase.LoginType.FACEBOOK
        }).then(function (user) {
            _this.DL.User = user;
        }, function (errorMessage) {
            console.log("facebook login error: " + errorMessage);
        });
    };
    DataAccess.prototype.RecipeSave = function () {
        this.RecipeDAL.Save(this.DL.Recipe);
    };
    DataAccess.prototype.UploadImage = function (source, path) {
        var _this = this;
        firebase.uploadFile({
            remoteFullPath: path,
            localFullPath: source,
            onProgress: function (status) {
                _this.DL.ngZone.run(function () {
                    _this.DL.DATA_UploadProgress = status.percentageCompleted;
                });
            }
        })
            .then(function (uploadedFile) {
            var uploaded = JSON.parse(JSON.stringify(uploadedFile));
            _this.ImageUploaded.emit(uploaded.url);
        }, function (error) {
            console.log("UploadImage: " + error);
        });
    };
    DataAccess.prototype.userChanged = function () {
        var _this = this;
        var listener = {
            onAuthStateChanged: function (data) {
                console.log(data.loggedIn ? "Logged in to firebase" : "Logged out from firebase");
                if (data.loggedIn)
                    _this.DL.User = data.user;
            },
            thisArg: this
        };
        firebase.addAuthStateListener(listener);
    };
    DataAccess = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [_1.DataLayer])
    ], DataAccess);
    return DataAccess;
}());
exports.DataAccess = DataAccess;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS5hY2Nlc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkYXRhLmFjY2Vzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUF5RDtBQUN6RCx1REFBMEQ7QUFFMUQsdUJBQStCO0FBQy9CLHVCQUEyQztBQUczQztJQUlJLG9CQUFvQixFQUFhO1FBQWIsT0FBRSxHQUFGLEVBQUUsQ0FBVztRQUZqQyxrQkFBYSxHQUF5QixJQUFJLG1CQUFZLEVBQUUsQ0FBQztRQUdyRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksWUFBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU0seUJBQUksR0FBWDtRQUNJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFTSwwQkFBSyxHQUFaO1FBQUEsaUJBVUc7UUFUQyxRQUFRLENBQUMsS0FBSyxDQUFDO1lBQ2IsSUFBSSxFQUFFLFFBQVEsQ0FBQyxTQUFTLENBQUMsUUFBUTtTQUNsQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsSUFBSTtZQUNSLEtBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUN0QixDQUFDLEVBQ0QsVUFBQyxZQUFZO1lBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsR0FBRyxZQUFZLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFSSwrQkFBVSxHQUFqQjtRQUNJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVNLGdDQUFXLEdBQWxCLFVBQW1CLE1BQWMsRUFBRSxJQUFZO1FBQS9DLGlCQWtCQztRQWpCRyxRQUFRLENBQUMsVUFBVSxDQUFDO1lBQ2hCLGNBQWMsRUFBRSxJQUFJO1lBQ3BCLGFBQWEsRUFBRSxNQUFNO1lBQ3JCLFVBQVUsRUFBRSxVQUFDLE1BQU07Z0JBQ2YsS0FBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO29CQUNmLEtBQUksQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEdBQUcsTUFBTSxDQUFDLG1CQUFtQixDQUFDO2dCQUM3RCxDQUFDLENBQUMsQ0FBQztZQUNQLENBQUM7U0FDSixDQUFDO2FBQ0QsSUFBSSxDQUFDLFVBQUEsWUFBWTtZQUNWLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBQ3hELEtBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQyxDQUFDLEVBQ0QsVUFBQyxLQUFLO1lBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUNKLENBQUM7SUFDTixDQUFDO0lBRU8sZ0NBQVcsR0FBbkI7UUFBQSxpQkFXQztRQVZHLElBQUksUUFBUSxHQUFHO1lBQ1gsa0JBQWtCLEVBQUUsVUFBQyxJQUFJO2dCQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsdUJBQXVCLEdBQUcsMEJBQTBCLENBQUMsQ0FBQztnQkFDbEYsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztvQkFDaEIsS0FBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztZQUM3QixDQUFDO1lBQ0QsT0FBTyxFQUFFLElBQUk7U0FDaEIsQ0FBQztRQUVGLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBNURRLFVBQVU7UUFEdEIsaUJBQVUsRUFBRTt5Q0FLZSxZQUFTO09BSnhCLFVBQVUsQ0E2RHRCO0lBQUQsaUJBQUM7Q0FBQSxBQTdERCxJQTZEQztBQTdEWSxnQ0FBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IGZpcmViYXNlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2VcIik7XG5cbmltcG9ydCB7IERhdGFMYXllciB9IGZyb20gXCIuL1wiO1xuaW1wb3J0IHsgUmVjaXBlREFMLCBSZWNpcGVJbmZvIH0gZnJvbSBcIi4vXCI7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEYXRhQWNjZXNzIHtcbiAgICBSZWNpcGVEQUw6IFJlY2lwZURBTDtcbiAgICBJbWFnZVVwbG9hZGVkOiBFdmVudEVtaXR0ZXI8c3RyaW5nPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgREw6IERhdGFMYXllcikge1xuICAgICAgICB0aGlzLlJlY2lwZURBTCA9IG5ldyBSZWNpcGVEQUwodGhpcy5ETCk7XG4gICAgfVxuXG4gICAgcHVibGljIExvYWQoKSB7XG4gICAgICAgIHRoaXMuUmVjaXBlREFMLkxvYWQoKTtcbiAgICAgICAgdGhpcy51c2VyQ2hhbmdlZCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBMb2dpbigpIHtcbiAgICAgICAgZmlyZWJhc2UubG9naW4oe1xuICAgICAgICAgIHR5cGU6IGZpcmViYXNlLkxvZ2luVHlwZS5GQUNFQk9PS1xuICAgICAgICB9KS50aGVuKHVzZXIgPT4ge1xuICAgICAgICAgICAgdGhpcy5ETC5Vc2VyID0gdXNlcjtcbiAgICAgICAgICB9LFxuICAgICAgICAgIChlcnJvck1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZmFjZWJvb2sgbG9naW4gZXJyb3I6IFwiICsgZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICBwdWJsaWMgUmVjaXBlU2F2ZSgpIHtcbiAgICAgICAgdGhpcy5SZWNpcGVEQUwuU2F2ZSh0aGlzLkRMLlJlY2lwZSk7XG4gICAgfVxuXG4gICAgcHVibGljIFVwbG9hZEltYWdlKHNvdXJjZTogc3RyaW5nLCBwYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgZmlyZWJhc2UudXBsb2FkRmlsZSh7XG4gICAgICAgICAgICByZW1vdGVGdWxsUGF0aDogcGF0aCxcbiAgICAgICAgICAgIGxvY2FsRnVsbFBhdGg6IHNvdXJjZSxcbiAgICAgICAgICAgIG9uUHJvZ3Jlc3M6IChzdGF0dXMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLkRMLm5nWm9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLkRMLkRBVEFfVXBsb2FkUHJvZ3Jlc3MgPSBzdGF0dXMucGVyY2VudGFnZUNvbXBsZXRlZDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4odXBsb2FkZWRGaWxlID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdXBsb2FkZWQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHVwbG9hZGVkRmlsZSkpO1xuICAgICAgICAgICAgICAgIHRoaXMuSW1hZ2VVcGxvYWRlZC5lbWl0KHVwbG9hZGVkLnVybCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJVcGxvYWRJbWFnZTogXCIgKyBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1c2VyQ2hhbmdlZCgpIHtcbiAgICAgICAgbGV0IGxpc3RlbmVyID0ge1xuICAgICAgICAgICAgb25BdXRoU3RhdGVDaGFuZ2VkOiAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhLmxvZ2dlZEluID8gXCJMb2dnZWQgaW4gdG8gZmlyZWJhc2VcIiA6IFwiTG9nZ2VkIG91dCBmcm9tIGZpcmViYXNlXCIpO1xuICAgICAgICAgICAgICBpZiAoZGF0YS5sb2dnZWRJbilcbiAgICAgICAgICAgICAgICB0aGlzLkRMLlVzZXIgPSBkYXRhLnVzZXI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGhpc0FyZzogdGhpc1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgZmlyZWJhc2UuYWRkQXV0aFN0YXRlTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIH1cbn0iXX0=