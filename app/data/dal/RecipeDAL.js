"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var firebase = require("nativescript-plugin-firebase");
var RecipeDAL = (function () {
    function RecipeDAL(DL) {
        this.DL = DL;
        this.PATH = "/recipe/items";
    }
    RecipeDAL.prototype.Load = function () {
        this.LoadOnline();
        this.LoadLocal();
    };
    RecipeDAL.prototype.LoadOnline = function () {
        var _this = this;
        this.DL.Recipes = new Array();
        firebase.query(function (fb) {
            var item = fb.value;
            item.id = fb.key;
            _this.DL.ngZone.run(function () {
                var exists = _this.DL.Recipes.find(function (i) { return i.id == item.id; });
                if (exists == null)
                    _this.DL.Recipes.push(item);
                else {
                    _this.DL.Recipes = _this.DL.Recipes.filter(function (i) { return i.id != exists.id; });
                    _this.DL.Recipes.push(item);
                }
                _this.DL.Recipes.sort(function (item1, item2) { return item1.Name.localeCompare(item2.Name); });
            });
        }, this.PATH, { orderBy: {
                type: firebase.QueryOrderByType.CHILD,
                value: 'Name'
            }
        });
    };
    RecipeDAL.prototype.LoadLocal = function () {
        var _this = this;
        this.DL.RecipesLocal = new Array();
        var recipes = this.DL.DATA_FS_DOCUMENT.getFile("recipes.json");
        recipes.readText().then(function (content) {
            if (content != null && content.length > 0)
                _this.DL.RecipesLocal = JSON.parse(content);
        });
    };
    RecipeDAL.prototype.Save = function (item) {
        if (!item.id)
            firebase.push(this.PATH, item);
        else
            firebase.update(this.PATH + "/" + item.id, item);
    };
    RecipeDAL.prototype.SaveLocal = function (item) {
        var exists = this.DL.RecipesLocal.find(function (i) { return i.id == item.id; });
        if (exists == null)
            this.DL.RecipesLocal.push(item);
        else {
            this.DL.RecipesLocal = this.DL.RecipesLocal.filter(function (i) { return i.id != exists.id; });
            this.DL.RecipesLocal.push(item);
        }
        this.DL.RecipesLocal.sort(function (item1, item2) { return item1.Name.localeCompare(item2.Name); });
        var recipes = this.DL.DATA_FS_DOCUMENT.getFile("recipes.json");
        recipes.writeText(JSON.stringify(this.DL.RecipesLocal));
    };
    return RecipeDAL;
}());
exports.RecipeDAL = RecipeDAL;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVjaXBlREFMLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUmVjaXBlREFMLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsdURBQTBEO0FBRTFEO0lBR0ksbUJBQW9CLEVBQWE7UUFBYixPQUFFLEdBQUYsRUFBRSxDQUFXO1FBRmpDLFNBQUksR0FBVyxlQUFlLENBQUM7SUFFTSxDQUFDO0lBRS9CLHdCQUFJLEdBQVg7UUFDSSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFTSw4QkFBVSxHQUFqQjtRQUFBLGlCQXVCQztRQXRCRyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sR0FBRyxJQUFJLEtBQUssRUFBYyxDQUFDO1FBQzFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBQSxFQUFFO1lBQ2IsSUFBSSxJQUFJLEdBQWMsRUFBRSxDQUFDLEtBQUssQ0FBQztZQUMvQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUM7WUFDakIsS0FBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO2dCQUNmLElBQUksTUFBTSxHQUFHLEtBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBZixDQUFlLENBQUMsQ0FBQztnQkFDeEQsRUFBRSxDQUFBLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQztvQkFDZCxLQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7Z0JBQzlCLElBQUksQ0FBQyxDQUFDO29CQUNGLEtBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxHQUFHLEtBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENB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YyxDQUFDLENBQUM7UUFDL0QsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBQ0wsZ0JBQUM7QUFBRCxDQUFDLEFBakVELElBaUVDO0FBakVZLDhCQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVjaXBlSW5mbywgRGF0YUxheWVyIH0gZnJvbSBcIi4uL1wiO1xuaW1wb3J0IGZpcmViYXNlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2VcIik7XG5cbmV4cG9ydCBjbGFzcyBSZWNpcGVEQUwge1xuICAgIFBBVEg6IHN0cmluZyA9IFwiL3JlY2lwZS9pdGVtc1wiO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBETDogRGF0YUxheWVyKSB7IH1cblxuICAgIHB1YmxpYyBMb2FkKCkge1xuICAgICAgICB0aGlzLkxvYWRPbmxpbmUoKTtcbiAgICAgICAgdGhpcy5Mb2FkTG9jYWwoKTtcbiAgICB9XG4gICAgXG4gICAgcHVibGljIExvYWRPbmxpbmUoKSB7XG4gICAgICAgIHRoaXMuREwuUmVjaXBlcyA9IG5ldyBBcnJheTxSZWNpcGVJbmZvPigpO1xuICAgICAgICBmaXJlYmFzZS5xdWVyeShmYiA9PiB7XG4gICAgICAgICAgICBsZXQgaXRlbTpSZWNpcGVJbmZvID0gZmIudmFsdWU7XG4gICAgICAgICAgICBpdGVtLmlkID0gZmIua2V5O1xuICAgICAgICAgICAgdGhpcy5ETC5uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZXhpc3RzID0gdGhpcy5ETC5SZWNpcGVzLmZpbmQoaSA9PiBpLmlkID09IGl0ZW0uaWQpO1xuICAgICAgICAgICAgICAgIGlmKGV4aXN0cyA9PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLkRMLlJlY2lwZXMucHVzaChpdGVtKVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLkRMLlJlY2lwZXMgPSB0aGlzLkRMLlJlY2lwZXMuZmlsdGVyKGkgPT4gaS5pZCAhPSBleGlzdHMuaWQpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuREwuUmVjaXBlcy5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuREwuUmVjaXBlcy5zb3J0KChpdGVtMSwgaXRlbTIpID0+IGl0ZW0xLk5hbWUubG9jYWxlQ29tcGFyZShpdGVtMi5OYW1lKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgdGhpcy5QQVRILFxuICAgICAgICAgICAgeyBvcmRlckJ5OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogZmlyZWJhc2UuUXVlcnlPcmRlckJ5VHlwZS5DSElMRCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ05hbWUnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBMb2FkTG9jYWwoKSB7XG4gICAgICAgIHRoaXMuREwuUmVjaXBlc0xvY2FsID0gbmV3IEFycmF5PFJlY2lwZUluZm8+KCk7XG4gICAgICAgIGxldCByZWNpcGVzID0gdGhpcy5ETC5EQVRBX0ZTX0RPQ1VNRU5ULmdldEZpbGUoXCJyZWNpcGVzLmpzb25cIik7XG4gICAgICAgIFxuICAgICAgICByZWNpcGVzLnJlYWRUZXh0KCkudGhlbihjb250ZW50ID0+IHtcbiAgICAgICAgICBpZihjb250ZW50ICE9IG51bGwgJiYgY29udGVudC5sZW5ndGggPiAwKVxuICAgICAgICAgICAgdGhpcy5ETC5SZWNpcGVzTG9jYWwgPSA8QXJyYXk8UmVjaXBlSW5mbz4+SlNPTi5wYXJzZShjb250ZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIFNhdmUoaXRlbTogUmVjaXBlSW5mbykge1xuICAgICAgICBpZighaXRlbS5pZClcbiAgICAgICAgICAgIGZpcmViYXNlLnB1c2godGhpcy5QQVRILCBpdGVtKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZmlyZWJhc2UudXBkYXRlKHRoaXMuUEFUSCArIFwiL1wiICsgaXRlbS5pZCwgaXRlbSk7XG4gICAgfVxuXG4gICAgcHVibGljIFNhdmVMb2NhbChpdGVtOiBSZWNpcGVJbmZvKSB7XG4gICAgICAgIGxldCBleGlzdHMgPSB0aGlzLkRMLlJlY2lwZXNMb2NhbC5maW5kKGkgPT4gaS5pZCA9PSBpdGVtLmlkKTtcbiAgICAgICAgaWYoZXhpc3RzID09IG51bGwpXG4gICAgICAgICAgICB0aGlzLkRMLlJlY2lwZXNMb2NhbC5wdXNoKGl0ZW0pXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ETC5SZWNpcGVzTG9jYWwgPSB0aGlzLkRMLlJlY2lwZXNMb2NhbC5maWx0ZXIoaSA9PiBpLmlkICE9IGV4aXN0cy5pZClcbiAgICAgICAgICAgIHRoaXMuREwuUmVjaXBlc0xvY2FsLnB1c2goaXRlbSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLkRMLlJlY2lwZXNMb2NhbC5zb3J0KChpdGVtMSwgaXRlbTIpID0+IGl0ZW0xLk5hbWUubG9jYWxlQ29tcGFyZShpdGVtMi5OYW1lKSk7XG4gICAgICAgIGxldCByZWNpcGVzID0gdGhpcy5ETC5EQVRBX0ZTX0RPQ1VNRU5ULmdldEZpbGUoXCJyZWNpcGVzLmpzb25cIik7XG4gICAgICAgIHJlY2lwZXMud3JpdGVUZXh0KEpTT04uc3RyaW5naWZ5KHRoaXMuREwuUmVjaXBlc0xvY2FsKSk7XG4gICAgfVxufSJdfQ==